{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || '/api',\n  timeout: 120000,\n  // 2 minutes timeout for BOM generation\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth tokens if needed\napi.interceptors.request.use(config => {\n  // Add auth token if available\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response2;\n  // Handle common errors\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Unauthorized - redirect to login if needed\n    localStorage.removeItem('authToken');\n  } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 429) {\n    // Rate limit exceeded\n    console.warn('Rate limit exceeded:', error.response.data);\n  } else if (error.code === 'ECONNABORTED') {\n    // Timeout error\n    error.message = 'Request timeout - please try again';\n  }\n  return Promise.reject(error);\n});\n\n// API functions\n\n/**\n * Get available LLM providers\n */\nexport const getLLMProviders = async () => {\n  const response = await api.get('/llm-providers');\n  return response.data;\n};\n\n/**\n * Generate BOM from requirements\n */\nexport const generateBOM = async requestData => {\n  var _response$headers$con;\n  const response = await api.post('/generate-bom', requestData, {\n    responseType: requestData.followUpAnswers ? 'json' : 'blob' // blob for Excel, json for follow-up questions\n  });\n\n  // If it's a follow-up response, return JSON\n  if ((_response$headers$con = response.headers['content-type']) !== null && _response$headers$con !== void 0 && _response$headers$con.includes('application/json')) {\n    return response.data;\n  }\n\n  // Otherwise, return the blob for Excel download\n  return response.data;\n};\n\n/**\n * Upload and parse document\n */\nexport const uploadDocument = async formData => {\n  const response = await api.post('/upload-document', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    },\n    timeout: 60000 // 1 minute timeout for document processing\n  });\n  return response.data;\n};\n\n/**\n * Get OCI service categories\n */\nexport const getOCICategories = async () => {\n  const response = await api.get('/oci-categories');\n  return response.data;\n};\n\n/**\n * Health check\n */\nexport const healthCheck = async () => {\n  const response = await api.get('/health');\n  return response.data;\n};\n\n// Utility functions\n\n/**\n * Download file from blob data\n */\nexport const downloadFile = (blob, filename) => {\n  const url = window.URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  window.URL.revokeObjectURL(url);\n};\n\n/**\n * Format file size\n */\nexport const formatFileSize = bytes => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\n/**\n * Validate file type\n */\nexport const validateFileType = file => {\n  const allowedTypes = ['application/pdf', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/msword', 'image/jpeg', 'image/png', 'image/bmp', 'image/tiff'];\n  const allowedExtensions = ['.pdf', '.xlsx', '.xls', '.docx', '.doc', '.jpg', '.jpeg', '.png', '.bmp', '.tiff'];\n  const fileExtension = '.' + file.name.split('.').pop().toLowerCase();\n  return {\n    isValid: allowedTypes.includes(file.type) && allowedExtensions.includes(fileExtension),\n    allowedTypes: allowedExtensions\n  };\n};\n\n/**\n * Retry function with exponential backoff\n */\nexport const retryWithBackoff = async (fn, maxRetries = 3) => {\n  let retries = 0;\n  while (retries < maxRetries) {\n    try {\n      return await fn();\n    } catch (error) {\n      var _error$response3;\n      if (retries === maxRetries - 1 || ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) < 500) {\n        throw error;\n      }\n      const delay = Math.pow(2, retries) * 1000; // Exponential backoff\n      await new Promise(resolve => setTimeout(resolve, delay));\n      retries++;\n    }\n  }\n};\n\n/**\n * Check if API is available\n */\nexport const checkAPIHealth = async () => {\n  try {\n    await healthCheck();\n    return true;\n  } catch (error) {\n    console.error('API health check failed:', error);\n    return false;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$response2","status","removeItem","console","warn","data","code","message","getLLMProviders","get","generateBOM","requestData","_response$headers$con","post","responseType","followUpAnswers","includes","uploadDocument","formData","getOCICategories","healthCheck","downloadFile","blob","filename","url","window","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","formatFileSize","bytes","k","sizes","i","Math","floor","log","parseFloat","pow","toFixed","validateFileType","file","allowedTypes","allowedExtensions","fileExtension","name","split","pop","toLowerCase","isValid","type","retryWithBackoff","fn","maxRetries","retries","_error$response3","delay","resolve","setTimeout","checkAPIHealth"],"sources":["/Users/NSaini/Documents/Documents - navdeep-saini-centroid-m1/datascience/coursera/Claude Code-Software Engineering with Generative AI Agents/oci-bom-generator/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || '/api',\n  timeout: 120000, // 2 minutes timeout for BOM generation\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth tokens if needed\napi.interceptors.request.use(\n  (config) => {\n    // Add auth token if available\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Handle common errors\n    if (error.response?.status === 401) {\n      // Unauthorized - redirect to login if needed\n      localStorage.removeItem('authToken');\n    } else if (error.response?.status === 429) {\n      // Rate limit exceeded\n      console.warn('Rate limit exceeded:', error.response.data);\n    } else if (error.code === 'ECONNABORTED') {\n      // Timeout error\n      error.message = 'Request timeout - please try again';\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// API functions\n\n/**\n * Get available LLM providers\n */\nexport const getLLMProviders = async () => {\n  const response = await api.get('/llm-providers');\n  return response.data;\n};\n\n/**\n * Generate BOM from requirements\n */\nexport const generateBOM = async (requestData) => {\n  const response = await api.post('/generate-bom', requestData, {\n    responseType: requestData.followUpAnswers ? 'json' : 'blob', // blob for Excel, json for follow-up questions\n  });\n  \n  // If it's a follow-up response, return JSON\n  if (response.headers['content-type']?.includes('application/json')) {\n    return response.data;\n  }\n  \n  // Otherwise, return the blob for Excel download\n  return response.data;\n};\n\n/**\n * Upload and parse document\n */\nexport const uploadDocument = async (formData) => {\n  const response = await api.post('/upload-document', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n    timeout: 60000, // 1 minute timeout for document processing\n  });\n  return response.data;\n};\n\n/**\n * Get OCI service categories\n */\nexport const getOCICategories = async () => {\n  const response = await api.get('/oci-categories');\n  return response.data;\n};\n\n/**\n * Health check\n */\nexport const healthCheck = async () => {\n  const response = await api.get('/health');\n  return response.data;\n};\n\n// Utility functions\n\n/**\n * Download file from blob data\n */\nexport const downloadFile = (blob, filename) => {\n  const url = window.URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  window.URL.revokeObjectURL(url);\n};\n\n/**\n * Format file size\n */\nexport const formatFileSize = (bytes) => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\n/**\n * Validate file type\n */\nexport const validateFileType = (file) => {\n  const allowedTypes = [\n    'application/pdf',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    'application/vnd.ms-excel',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/msword',\n    'image/jpeg',\n    'image/png',\n    'image/bmp',\n    'image/tiff'\n  ];\n\n  const allowedExtensions = ['.pdf', '.xlsx', '.xls', '.docx', '.doc', '.jpg', '.jpeg', '.png', '.bmp', '.tiff'];\n  \n  const fileExtension = '.' + file.name.split('.').pop().toLowerCase();\n  \n  return {\n    isValid: allowedTypes.includes(file.type) && allowedExtensions.includes(fileExtension),\n    allowedTypes: allowedExtensions\n  };\n};\n\n/**\n * Retry function with exponential backoff\n */\nexport const retryWithBackoff = async (fn, maxRetries = 3) => {\n  let retries = 0;\n  \n  while (retries < maxRetries) {\n    try {\n      return await fn();\n    } catch (error) {\n      if (retries === maxRetries - 1 || error.response?.status < 500) {\n        throw error;\n      }\n      \n      const delay = Math.pow(2, retries) * 1000; // Exponential backoff\n      await new Promise(resolve => setTimeout(resolve, delay));\n      retries++;\n    }\n  }\n};\n\n/**\n * Check if API is available\n */\nexport const checkAPIHealth = async () => {\n  try {\n    await healthCheck();\n    return true;\n  } catch (error) {\n    console.error('API health check failed:', error);\n    return false;\n  }\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}